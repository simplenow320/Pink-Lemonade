{"version":3,"file":"static/js/893.3a84ce28.chunk.js","mappings":"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","sources":["pages/Survey.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { motion } from 'framer-motion';\n\nconst Survey = () => {\n  const { projectId } = useParams();\n  const [searchParams] = useSearchParams();\n  const role = searchParams.get('role') || 'participant';\n  \n  const [survey, setSurvey] = useState(null);\n  const [responses, setResponses] = useState({});\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [completed, setCompleted] = useState(false);\n\n  useEffect(() => {\n    loadSurvey();\n  }, [projectId, role]);\n\n  const loadSurvey = async () => {\n    try {\n      const response = await fetch(`/api/smart-reporting/phase3/survey/${projectId}?role=${role}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setSurvey(data.survey);\n      } else {\n        console.error('Failed to load survey:', data.error);\n      }\n    } catch (error) {\n      console.error('Survey loading error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResponse = (questionId, value) => {\n    setResponses(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  const submitSurvey = async () => {\n    setSubmitting(true);\n    try {\n      const response = await fetch(`/api/smart-reporting/phase3/survey-response`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          project_id: parseInt(projectId),\n          respondent_role: role,\n          responses: responses\n        })\n      });\n\n      const data = await response.json();\n      if (data.success) {\n        setCompleted(true);\n      } else {\n        alert('Failed to submit survey: ' + data.error);\n      }\n    } catch (error) {\n      console.error('Survey submission error:', error);\n      alert('Failed to submit survey. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-pink-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading survey...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (completed) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <motion.div \n          className=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 text-center\"\n          initial={{ scale: 0.9, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        >\n          <div className=\"text-6xl mb-4\">üéâ</div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Thank You!</h1>\n          <p className=\"text-gray-600 mb-6\">\n            Your survey response has been submitted successfully. Your input is valuable for measuring program impact.\n          </p>\n          <div className=\"bg-pink-50 border border-pink-200 rounded-lg p-4\">\n            <p className=\"text-pink-800 text-sm\">\n              You can close this window. If you have questions, contact us at support@pinklemonade.app\n            </p>\n          </div>\n        </motion.div>\n      </div>\n    );\n  }\n\n  if (!survey || !survey.questions || survey.questions.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <div className=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Survey Not Available</h1>\n          <p className=\"text-gray-600 mb-6\">\n            The survey you're looking for is not available or has been completed.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const progress = ((currentQuestion + 1) / survey.questions.length) * 100;\n  const question = survey.questions[currentQuestion];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">üçã Impact Survey</h1>\n          <p className=\"text-gray-600\">\n            Project: {survey.project_name} | Role: {role}\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n            <span>Question {currentQuestion + 1} of {survey.questions.length}</span>\n            <span>{Math.round(progress)}% Complete</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <motion.div \n              className=\"bg-pink-500 h-2 rounded-full\"\n              initial={{ width: 0 }}\n              animate={{ width: `${progress}%` }}\n              transition={{ duration: 0.5 }}\n            />\n          </div>\n        </div>\n\n        {/* Question Card */}\n        <motion.div \n          key={currentQuestion}\n          className=\"bg-white rounded-lg shadow-lg p-8 mb-8\"\n          initial={{ x: 50, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">\n            {question.question_text}\n          </h2>\n\n          {question.question_type === 'scale' && (\n            <div className=\"space-y-3\">\n              {[1, 2, 3, 4, 5].map(value => (\n                <label key={value} className=\"flex items-center cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name={`question_${question.id}`}\n                    value={value}\n                    checked={responses[question.id] === value}\n                    onChange={() => handleResponse(question.id, value)}\n                    className=\"mr-3 text-pink-500\"\n                  />\n                  <span className=\"text-gray-700\">\n                    {value} - {value === 1 ? 'Strongly Disagree' : \n                          value === 2 ? 'Disagree' : \n                          value === 3 ? 'Neutral' : \n                          value === 4 ? 'Agree' : 'Strongly Agree'}\n                  </span>\n                </label>\n              ))}\n            </div>\n          )}\n\n          {question.question_type === 'text' && (\n            <textarea\n              className=\"w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent\"\n              rows=\"4\"\n              placeholder=\"Please share your thoughts...\"\n              value={responses[question.id] || ''}\n              onChange={(e) => handleResponse(question.id, e.target.value)}\n            />\n          )}\n\n          {question.question_type === 'multiple_choice' && question.options && (\n            <div className=\"space-y-3\">\n              {question.options.map((option, index) => (\n                <label key={index} className=\"flex items-center cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name={`question_${question.id}`}\n                    value={option}\n                    checked={responses[question.id] === option}\n                    onChange={() => handleResponse(question.id, option)}\n                    className=\"mr-3 text-pink-500\"\n                  />\n                  <span className=\"text-gray-700\">{option}</span>\n                </label>\n              ))}\n            </div>\n          )}\n        </motion.div>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between\">\n          <button\n            onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}\n            disabled={currentQuestion === 0}\n            className=\"px-6 py-3 bg-gray-200 text-gray-700 rounded-lg font-medium disabled:opacity-50 hover:bg-gray-300 transition-colors\"\n          >\n            Previous\n          </button>\n\n          {currentQuestion < survey.questions.length - 1 ? (\n            <button\n              onClick={() => setCurrentQuestion(currentQuestion + 1)}\n              disabled={!responses[question.id]}\n              className=\"px-6 py-3 bg-pink-500 text-white rounded-lg font-medium disabled:opacity-50 hover:bg-pink-600 transition-colors\"\n            >\n              Next\n            </button>\n          ) : (\n            <button\n              onClick={submitSurvey}\n              disabled={!responses[question.id] || submitting}\n              className=\"px-6 py-3 bg-green-500 text-white rounded-lg font-medium disabled:opacity-50 hover:bg-green-600 transition-colors\"\n            >\n              {submitting ? 'Submitting...' : 'Submit Survey'}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Survey;"],"names":["Survey","projectId","useParams","searchParams","useSearchParams","role","get","survey","setSurvey","useState","responses","setResponses","currentQuestion","setCurrentQuestion","loading","setLoading","submitting","setSubmitting","completed","setCompleted","useEffect","loadSurvey","async","response","fetch","concat","data","json","success","console","error","handleResponse","questionId","value","prev","_objectSpread","_jsx","className","children","_jsxs","motion","div","initial","scale","opacity","animate","transition","duration","questions","length","progress","question","project_name","Math","round","width","x","question_text","question_type","map","type","name","id","checked","onChange","rows","placeholder","e","target","options","option","index","onClick","max","disabled","method","headers","body","JSON","stringify","project_id","parseInt","respondent_role","alert"],"sourceRoot":""}
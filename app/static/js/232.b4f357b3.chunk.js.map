{"version":3,"file":"static/js/232.b4f357b3.chunk.js","mappings":"6LAIA,MA+RA,EA/RoBA,KAClB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,OAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,OAClCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAWC,IAAgBN,EAAAA,EAAAA,WAAS,IACpCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,OAEnCS,EAAAA,EAAAA,WAAU,KACRC,KACC,CAAChB,IAEJ,MAAMgB,EAAoBC,UACxB,IACEP,GAAW,GACX,MAAMQ,QAAiBC,EAAAA,EAAMC,IAAI,eAADC,OAAgBrB,IAChDK,EAASa,EAASI,KAAKlB,OAGvBmB,GACF,CAAE,MAAOC,GACPV,EAAS,gCACTW,QAAQZ,MAAM,wBAAyBW,EACzC,CAAC,QACCd,GAAW,EACb,GAGIa,EAAgBN,UACpB,IACEL,GAAa,GACb,MAAMM,QAAiBC,EAAAA,EAAMC,IAAI,eAADC,OAAgBrB,EAAE,aAClDQ,EAAYU,EAASI,KAAKf,SAC5B,CAAE,MAAOiB,GACPC,QAAQZ,MAAM,2BAA4BW,EAC5C,CAAC,QACCZ,GAAa,EACf,GAqBF,OAAIH,GAEAiB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kCAAiCC,UAC9CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iFACfD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,oCAOnCf,IAAUT,GAEVsB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iCAAgCC,UAC7CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oBAAmBC,SAAEf,GAAS,qBAC3Ca,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,UAAUJ,UAAU,oCAAmCC,SAAC,kCAUzEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAElBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,UAAUJ,UAAU,8DAA6DC,SAAC,wCAG3FF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mCAAkCC,SAAExB,EAAM4B,SACxDN,EAAAA,EAAAA,KAAA,KAAGC,UAAU,6BAA4BC,SAAExB,EAAM6B,aAInDJ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sCAAqCC,SAAA,EAClDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,uBACzDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCC,SAAA,EACpDC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,kBACrCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,4BAA2BC,SACrCxB,EAAM8B,YAAc9B,EAAM+B,WAAU,IAAAd,QAC9BjB,EAAM8B,YAAc,GAAGE,iBAAgB,QAAAf,QAAQjB,EAAM+B,YAAc,GAAGC,kBAC3E,sBAGNP,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,cACrCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,4BAA2BC,SACrCxB,EAAMiC,SAAW,IAAIC,KAAKlC,EAAMiC,UAAUE,qBAAuB,sBAGtEV,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,YACrCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,4BAA2BC,SAAExB,EAAMoC,QAAU,sBAE5DX,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,YACrCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uCAAsCC,SAAExB,EAAMqC,QAAU,oBAIxErC,EAAMsC,cACLb,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,iBACrCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBC,SAAExB,EAAMsC,kBAI7Cb,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,CAC7BxB,EAAMuC,OACLjB,EAAAA,EAAAA,KAAA,KACEkB,KAAMxC,EAAMuC,KACZE,OAAO,SACPC,IAAI,sBACJnB,UAAU,kFAAiFC,SAC5F,qCAIHF,EAAAA,EAAAA,KAAA,UACEqB,QAASA,IAAM7C,EAAS,oCAADmB,OAAqCrB,IAC5D2B,UAAU,kFAAiFC,SAC5F,6BAOJjB,GACCe,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iCAAgCC,UAC7CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+EACfD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,iDAG/BrB,GACFsB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EAExBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,uBACzDF,EAAAA,EAAAA,KAAA,OAAKC,UAAS,yDAAAN,QA7HQ2B,EA6H0EzC,EAAS0C,wBA5HlG,CACb,qBAAsB,+CACtB,oBAAqB,4CACrB,qBAAsB,kDACtB,kBAAmB,yCACnB,kBAAmB,6CAEPD,IAAmB,8CAqH2GpB,SACjIrB,EAAS0C,2BAEZvB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBC,SAAErB,EAAS2C,sBAG5CrB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,wBAAuBC,SAAC,sBACxCC,EAAAA,EAAAA,MAAA,QAAMF,UAAS,sBAAAN,QA3HF8B,EA2H4C5C,EAAS6C,gBA1H1ED,GAAS,EAAU,iBACnBA,GAAS,EAAU,gBACnBA,GAAS,EAAU,kBAChB,iBAuH0FvB,SAAA,CAClFrB,EAAS6C,gBAAgB,aAG9B1B,EAAAA,EAAAA,KAAA,KAAGC,UAAU,6BAA4BC,SAAErB,EAAS8C,+BAKxDxB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,sBACzDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,UACrBrB,EAAS+C,kBAAoB,IAAIC,IAAI,CAACC,EAAKC,KAC3C5B,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,mBAAkBC,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAC,YACrCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAE4B,MAF1BC,UASf5B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,qBACzDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,UACrBrB,EAASmD,iBAAmB,IAAIH,IAAI,CAACI,EAAQF,KAC7C5B,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,mBAAkBC,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBC,SAAC,YACtCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAE+B,MAF1BF,UASf5B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,0BACzDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,UACrBrB,EAASqD,sBAAwB,IAAIL,IAAI,CAACM,EAAWJ,KACrD5B,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,mBAAkBC,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,uBAAsBC,SAAC,YACvCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEiC,MAF1BJ,UASf5B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,0BACzDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,UACrBrB,EAASuD,sBAAwB,IAAIP,IAAI,CAACQ,EAAMN,KAChD5B,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,mBAAkBC,SAAA,EAC1CC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,iCAAgCC,SAAA,CAAE6B,EAAQ,EAAE,QAC5D/B,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEmC,MAF1BN,OAMb5B,EAAAA,EAAAA,MAAA,KAAGF,UAAU,6BAA4BC,SAAA,EACvCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,cAAaC,SAAC,mBAAqB,IAAErB,EAASyD,eAAiB,uBAKnFnC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,gBACzDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,UACrBrB,EAAS0D,YAAc,IAAIV,IAAI,CAACQ,EAAMN,KACtC5B,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,mBAAkBC,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAC,YACrCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEmC,MAF1BN,UASf5B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,2BACzDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wCAAuCC,UAClDrB,EAAS2D,uBAAyB,IAAIX,IAAI,CAACY,EAAMV,KACjD5B,EAAAA,EAAAA,MAAA,SAAmBF,UAAU,6CAA4CC,SAAA,EACvEF,EAAAA,EAAAA,KAAA,SAAO0C,KAAK,WAAWzC,UAAU,+CACjCD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEuC,MAFvBV,SASjBlD,EAAS8D,wBACRxC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mDAAkDC,SAAA,EAC/DF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,mCACzDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWC,UACrBrB,EAAS8D,uBAAyB,IAAId,IAAI,CAACe,EAAKb,KAChD5B,EAAAA,EAAAA,MAAA,MAAgBF,UAAU,gBAAeC,SAAA,CAAC,UAAG0C,IAApCb,aAOnB/B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iCAAgCC,UAC7CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,4BAA2BC,SAAC,8EAlOtBuB,MAXKH,E","sources":["pages/GrantDetail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\nconst GrantDetail = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [grant, setGrant] = useState(null);\n  const [analysis, setAnalysis] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchGrantDetails();\n  }, [id]);\n\n  const fetchGrantDetails = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`/api/grants/${id}`);\n      setGrant(response.data.grant);\n      \n      // Automatically fetch analysis\n      fetchAnalysis();\n    } catch (err) {\n      setError('Failed to load grant details');\n      console.error('Error fetching grant:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchAnalysis = async () => {\n    try {\n      setAnalyzing(true);\n      const response = await axios.get(`/api/grants/${id}/analyze`);\n      setAnalysis(response.data.analysis);\n    } catch (err) {\n      console.error('Error fetching analysis:', err);\n    } finally {\n      setAnalyzing(false);\n    }\n  };\n\n  const getRecommendationColor = (recommendation) => {\n    const colors = {\n      'Highly Recommended': 'bg-green-100 text-green-800 border-green-200',\n      'Worth Considering': 'bg-blue-100 text-blue-800 border-blue-200',\n      'Consider Carefully': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      'Not Recommended': 'bg-red-100 text-red-800 border-red-200',\n      'Review Manually': 'bg-gray-100 text-gray-800 border-gray-200'\n    };\n    return colors[recommendation] || 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getAlignmentColor = (score) => {\n    if (score >= 8) return 'text-green-600';\n    if (score >= 6) return 'text-blue-600';\n    if (score >= 4) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"bg-white shadow rounded-lg p-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-pink-500 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading grant details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !grant) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"bg-white shadow rounded-lg p-8\">\n          <div className=\"text-center\">\n            <p className=\"text-red-600 mb-4\">{error || 'Grant not found'}</p>\n            <Link to=\"/grants\" className=\"text-pink-600 hover:text-pink-700\">\n              ← Back to Grants\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <Link to=\"/grants\" className=\"text-pink-600 hover:text-pink-700 text-sm mb-4 inline-block\">\n          ← Back to Grant Opportunities\n        </Link>\n        <h1 className=\"text-3xl font-bold text-gray-900\">{grant.title}</h1>\n        <p className=\"text-lg text-gray-600 mt-2\">{grant.funder}</p>\n      </div>\n\n      {/* Grant Details Card */}\n      <div className=\"bg-white shadow rounded-lg p-6 mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Grant Information</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <p className=\"text-sm text-gray-500\">Amount Range</p>\n            <p className=\"font-medium text-gray-900\">\n              {grant.amount_min || grant.amount_max ? \n                `$${(grant.amount_min || 0).toLocaleString()} - $${(grant.amount_max || 0).toLocaleString()}` :\n                'Not specified'}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">Deadline</p>\n            <p className=\"font-medium text-gray-900\">\n              {grant.deadline ? new Date(grant.deadline).toLocaleDateString() : 'Not specified'}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">Source</p>\n            <p className=\"font-medium text-gray-900\">{grant.source || 'Not specified'}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-gray-500\">Status</p>\n            <p className=\"font-medium text-gray-900 capitalize\">{grant.status || 'Available'}</p>\n          </div>\n        </div>\n        \n        {grant.description && (\n          <div className=\"mt-4\">\n            <p className=\"text-sm text-gray-500\">Description</p>\n            <p className=\"text-gray-900 mt-1\">{grant.description}</p>\n          </div>\n        )}\n\n        <div className=\"mt-6 flex gap-3\">\n          {grant.link && (\n            <a \n              href={grant.link} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"px-4 py-2 bg-pink-500 text-white rounded-lg hover:bg-pink-600 transition-colors\"\n            >\n              View Official Grant Page →\n            </a>\n          )}\n          <button\n            onClick={() => navigate(`/smart-tools/grant-pitch?grantId=${id}`)}\n            className=\"px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors\"\n          >\n            Create Grant Pitch\n          </button>\n        </div>\n      </div>\n\n      {/* AI Analysis Section */}\n      {analyzing ? (\n        <div className=\"bg-white shadow rounded-lg p-8\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-pink-500 mx-auto mb-3\"></div>\n            <p className=\"text-gray-600\">Analyzing grant fit and requirements...</p>\n          </div>\n        </div>\n      ) : analysis ? (\n        <div className=\"space-y-6\">\n          {/* Decision Recommendation */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">AI Recommendation</h2>\n            <div className={`inline-flex px-4 py-2 rounded-full font-medium border ${getRecommendationColor(analysis.decision_recommendation)}`}>\n              {analysis.decision_recommendation}\n            </div>\n            <p className=\"text-gray-700 mt-3\">{analysis.decision_rationale}</p>\n            \n            {/* Alignment Score */}\n            <div className=\"mt-4\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-gray-500\">Alignment Score:</span>\n                <span className={`text-2xl font-bold ${getAlignmentColor(analysis.alignment_score)}`}>\n                  {analysis.alignment_score}/10\n                </span>\n              </div>\n              <p className=\"text-sm text-gray-600 mt-1\">{analysis.alignment_explanation}</p>\n            </div>\n          </div>\n\n          {/* Key Requirements */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Key Requirements</h3>\n            <ul className=\"space-y-2\">\n              {(analysis.key_requirements || []).map((req, index) => (\n                <li key={index} className=\"flex items-start\">\n                  <span className=\"text-pink-500 mr-2\">•</span>\n                  <span className=\"text-gray-700\">{req}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Success Factors */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Success Factors</h3>\n            <ul className=\"space-y-2\">\n              {(analysis.success_factors || []).map((factor, index) => (\n                <li key={index} className=\"flex items-start\">\n                  <span className=\"text-green-500 mr-2\">✓</span>\n                  <span className=\"text-gray-700\">{factor}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Potential Challenges */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Potential Challenges</h3>\n            <ul className=\"space-y-2\">\n              {(analysis.potential_challenges || []).map((challenge, index) => (\n                <li key={index} className=\"flex items-start\">\n                  <span className=\"text-yellow-500 mr-2\">⚠</span>\n                  <span className=\"text-gray-700\">{challenge}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Recommended Approach */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Recommended Approach</h3>\n            <ol className=\"space-y-2\">\n              {(analysis.recommended_approach || []).map((step, index) => (\n                <li key={index} className=\"flex items-start\">\n                  <span className=\"text-pink-500 font-medium mr-2\">{index + 1}.</span>\n                  <span className=\"text-gray-700\">{step}</span>\n                </li>\n              ))}\n            </ol>\n            <p className=\"text-sm text-gray-600 mt-4\">\n              <span className=\"font-medium\">Time Estimate:</span> {analysis.time_estimate || 'Not specified'}\n            </p>\n          </div>\n\n          {/* Next Steps */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Next Steps</h3>\n            <ul className=\"space-y-2\">\n              {(analysis.next_steps || []).map((step, index) => (\n                <li key={index} className=\"flex items-start\">\n                  <span className=\"text-blue-500 mr-2\">→</span>\n                  <span className=\"text-gray-700\">{step}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Preparation Checklist */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Preparation Checklist</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              {(analysis.preparation_checklist || []).map((item, index) => (\n                <label key={index} className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input type=\"checkbox\" className=\"rounded text-pink-500 focus:ring-pink-500\" />\n                  <span className=\"text-gray-700\">{item}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Similar Opportunities */}\n          {analysis.similar_opportunities && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Finding Similar Opportunities</h3>\n              <ul className=\"space-y-1\">\n                {(analysis.similar_opportunities || []).map((opp, index) => (\n                  <li key={index} className=\"text-gray-700\">• {opp}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <p className=\"text-gray-600 text-center\">\n            AI analysis not available. Please review the grant details manually.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GrantDetail;"],"names":["GrantDetail","id","useParams","navigate","useNavigate","grant","setGrant","useState","analysis","setAnalysis","loading","setLoading","analyzing","setAnalyzing","error","setError","useEffect","fetchGrantDetails","async","response","axios","get","concat","data","fetchAnalysis","err","console","_jsx","className","children","_jsxs","Link","to","title","funder","amount_min","amount_max","toLocaleString","deadline","Date","toLocaleDateString","source","status","description","link","href","target","rel","onClick","recommendation","decision_recommendation","decision_rationale","score","alignment_score","alignment_explanation","key_requirements","map","req","index","success_factors","factor","potential_challenges","challenge","recommended_approach","step","time_estimate","next_steps","preparation_checklist","item","type","similar_opportunities","opp"],"sourceRoot":""}